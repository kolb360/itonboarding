# .github/workflows/process-onboarding.yml
name: Process IT Onboarding Requests

on:
  issues:
    types: [opened]

jobs:
  process-onboarding:
    if: contains(github.event.issue.labels.*.name, 'IT-Onboarding')
    runs-on: ubuntu-latest

    permissions:
      contents: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0            # full history in case we need it
          persist-credentials: true # enable pushes via GITHUB_TOKEN

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Extract issue data and create XML
        run: |
          mkdir -p data
          cat << 'EOF' > process_onboarding.js
          const fs = require('fs');
          const path = require('path');

          // Get issue data from environment
          const issueBody   = process.env.ISSUE_BODY;
          const issueTitle  = process.env.ISSUE_TITLE;
          const issueNumber = process.env.ISSUE_NUMBER;

          console.log(`Processing IT Onboarding Issue #${issueNumber}`);

          // Extract structured data from issue body
          function extractValue(body, key) {
            const regex = new RegExp(`\\*\\*${key}:\\*\\*\\s*(.*)`, 'i');
            const match = body.match(regex);
            return match ? match[1].trim() : '';
          }

          const data = {
            requestId:        extractValue(issueBody, 'REQUEST_ID'),
            firstName:        extractValue(issueBody, 'FIRST_NAME'),
            lastName:         extractValue(issueBody, 'LAST_NAME'),
            homeEmail:        extractValue(issueBody, 'HOME_EMAIL'),
            startDate:        extractValue(issueBody, 'START_DATE'),
            manager:          extractValue(issueBody, 'MANAGER'),
            jobTitle:         extractValue(issueBody, 'JOB_TITLE'),
            department:       extractValue(issueBody, 'DEPARTMENT'),
            employmentType:   extractValue(issueBody, 'EMPLOYMENT_TYPE'),
            contractingCompany: extractValue(issueBody, 'CONTRACTING_COMPANY'),
            homeRegion:       extractValue(issueBody, 'HOME_REGION'),
            itAssignee:       extractValue(issueBody, 'IT_ASSIGNEE'),
            submissionDate:   extractValue(issueBody, 'SUBMISSION_DATE')
          };

          // Escape XML special characters
          function escapeXML(str) {
            if (!str) return '';
            return str.replace(/[<>&'\"]/g, c => {
              switch (c) {
                case '<': return '&lt;';
                case '>': return '&gt;';
                case '&': return '&amp;';
                case "'": return '&apos;';
                case '"': return '&quot;';
              }
            });
          }

          // Build XML request block
          const xmlRequest = `  <ITOnboardingRequest>
            <Metadata>
              <SubmissionDate>${escapeXML(data.submissionDate || new Date().toISOString())}</SubmissionDate>
              <RequestID>${escapeXML(data.requestId)}</RequestID>
              <IssueNumber>${escapeXML(issueNumber)}</IssueNumber>
            </Metadata>
            <Employee>
              <PersonalInfo>
                <FirstName>${escapeXML(data.firstName)}</FirstName>
                <LastName>${escapeXML(data.lastName)}</LastName>
                <HomeEmail>${escapeXML(data.homeEmail)}</HomeEmail>
              </PersonalInfo>
              <EmploymentDetails>
                <StartDate>${escapeXML(data.startDate)}</StartDate>
                <Manager>${escapeXML(data.manager)}</Manager>
                <JobTitle>${escapeXML(data.jobTitle)}</JobTitle>
                <Department>${escapeXML(data.department)}</Department>
                <EmploymentType>${escapeXML(data.employmentType)}</EmploymentType>${data.contractingCompany ? `
                <ContractingCompany>${escapeXML(data.contractingCompany)}</ContractingCompany>` : ''}
                <HomeRegion>${escapeXML(data.homeRegion)}</HomeRegion>
              </EmploymentDetails>
            </Employee>
            <ITSetup>
              <AssignedTo>${escapeXML(data.itAssignee)}</AssignedTo>
              <Status>Pending</Status>
              <ProcessedDate>${escapeXML(new Date().toISOString())}</ProcessedDate>
            </ITSetup>
          </ITOnboardingRequest>`;

          const xmlFile = 'data/work_orders.xml';
          let fileContent;

          if (fs.existsSync(xmlFile)) {
            console.log('Appending to existing work_orders.xml');
            const existing = fs.readFileSync(xmlFile, 'utf8');
            if (existing.includes('<WorkOrders>') && existing.includes('</WorkOrders>')) {
              fileContent = existing.replace('</WorkOrders>', xmlRequest + '\n</WorkOrders>');
            } else {
              const inner = existing.replace(/<\?xml[\s\S]*?\?>\s*/, '').trim();
              fileContent = `<?xml version="1.0" encoding="UTF-8"?>
          <WorkOrders>
          ${inner}
          ${xmlRequest}
          </WorkOrders>`;
            }
          } else {
            console.log('Creating new work_orders.xml file');
            fileContent = `<?xml version="1.0" encoding="UTF-8"?>
        <WorkOrders>
        ${xmlRequest}
        </WorkOrders>`;
          }

          fs.writeFileSync(xmlFile, fileContent);
          console.log('Successfully updated ' + xmlFile);
          console.log(`::notice title=Onboarding Processed::${escapeXML(data.firstName)} ${escapeXML(data.lastName)} - ${escapeXML(data.startDate)}`);
          EOF
          node process_onboarding.js
        env:
          ISSUE_BODY:   ${{ github.event.issue.body }}
          ISSUE_TITLE:  ${{ github.event.issue.title }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}

      - name: Commit XML changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name  "github-actions[bot]"
          if [[ -n $(git status --porcelain) ]]; then
            git add data/work_orders.xml
            git commit -m "ü§ñ Add IT onboarding request from issue #${{ github.event.issue.number }}

Employee: ${{ github.event.issue.title }}
Processed: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            git push
            echo "XML_UPDATED=true" >> $GITHUB_ENV
          else
            echo "No changes to commit"
            echo "XML_UPDATED=false" >> $GITHUB_ENV
          fi

      - name: Update issue with success comment
        if: env.XML_UPDATED == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const repoUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}`;
            const fileLink = `${repoUrl}/blob/main/data/work_orders.xml`;
            const comment = `## ‚úÖ Onboarding Request Processed Successfully!

Your IT onboarding request has been automatically processed and added to \`data/work_orders.xml\`.

**What happens next:**
1. The IT team will review the XML file
2. User accounts and access will be created
3. Hardware and software will be prepared
4. You'll receive updates on this issue

**View the updated file:** [data/work_orders.xml](${fileLink})

---
*Processed automatically by GitHub Actions at ${new Date().toISOString()}*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['‚úÖ Processed']
            });

      - name: Handle processing failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const repoUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}`;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ‚ùå Processing Failed

There was an error processing this onboarding request. Please check the [workflow run](${repoUrl}/actions) for details.

The IT team has been notified and will process this request manually.`
            });

            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['‚ùå Failed', 'üö® Manual Review Needed']
            });
